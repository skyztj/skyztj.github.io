<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java诊断工具-Arthas]]></title>
    <url>%2F2019%2F07%2F29%2FJava%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-Arthas%2F</url>
    <content type="text"><![CDATA[Arthas 是Alibaba开源的Java诊断工具。 当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？ 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？ 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？ 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！ 是否有一个全局视角来查看系统的运行状况？ 有什么办法可以监控到JVM的实时运行状态？ Arthas支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。 在线教程(推荐)基础教程 进阶教程 通过Cloud Toolkit插件使用Arthas一键诊断远程服务器 Docs 快速入门1. 启动Demo12wget https://alibaba.github.io/arthas/arthas-demo.jarjava -jar arthas-demo.jar arthas-demo是一个简单的程序，每隔一秒生成一个随机数，再执行质因式分解，并打印出分解结果。 arthas-demo源代码：查看 2. 启动arthas在命令行下面执行（使用和目标进程一致的用户启动，否则可能attach失败）： 12wget https://alibaba.github.io/arthas/arthas-boot.jarjava -jar arthas-boot.jar 执行该程序的用户需要和目标进程具有相同的权限。比如以admin用户来执行：sudo su admin &amp;&amp; java -jar arthas-boot.jar 或 sudo -u admin -EH java -jar arthas-boot.jar。 如果attach不上目标进程，可以查看~/logs/arthas/ 目录下的日志。 如果下载速度比较慢，可以使用aliyun的镜像：java -jar arthas-boot.jar --repo-mirror aliyun --use-http java -jar arthas-boot.jar -h 打印更多参数信息。 选择应用java进程： 123$ $ java -jar arthas-boot.jar* [1]: 35542 [2]: 71560 arthas-demo.jar Demo进程是第2个，则输入2，再输入回车/enter。Arthas会attach到目标进程上，并输出日志： 123456789101112131415[INFO] Try to attach process 71560[INFO] Attach process 71560 success.[INFO] arthas-client connect 127.0.0.1 3658 ,---. ,------. ,--------.,--. ,--. ,---. ,---. / O \ | .--. &apos;&apos;--. .--&apos;| &apos;--&apos; | / O \ &apos; .-&apos;| .-. || &apos;--&apos;.&apos; | | | .--. || .-. |`. `-.| | | || |\ \ | | | | | || | | |.-&apos; |`--&apos; `--&apos;`--&apos; &apos;--&apos; `--&apos; `--&apos; `--&apos;`--&apos; `--&apos;`-----&apos; wiki: https://alibaba.github.io/arthasversion: 3.0.5.20181127201536pid: 71560time: 2018-11-28 19:16:24 $ 3. 查看dashboard输入dashboard，按回车/enter，会展示当前进程的信息，按ctrl+c可以中断执行。 12345678910111213141516171819202122232425262728293031$ dashboardID NAME GROUP PRIORI STATE %CPU TIME INTERRU DAEMON17 pool-2-thread-1 system 5 WAITIN 67 0:0 false false27 Timer-for-arthas-dashb system 10 RUNNAB 32 0:0 false true11 AsyncAppender-Worker-a system 9 WAITIN 0 0:0 false true9 Attach Listener system 9 RUNNAB 0 0:0 false true3 Finalizer system 8 WAITIN 0 0:0 false true2 Reference Handler system 10 WAITIN 0 0:0 false true4 Signal Dispatcher system 9 RUNNAB 0 0:0 false true26 as-command-execute-dae system 10 TIMED_ 0 0:0 false true13 job-timeout system 9 TIMED_ 0 0:0 false true1 main main 5 TIMED_ 0 0:0 false false14 nioEventLoopGroup-2-1 system 10 RUNNAB 0 0:0 false false18 nioEventLoopGroup-2-2 system 10 RUNNAB 0 0:0 false false23 nioEventLoopGroup-2-3 system 10 RUNNAB 0 0:0 false false15 nioEventLoopGroup-3-1 system 10 RUNNAB 0 0:0 false falseMemory used total max usage GCheap 32M 155M 1820M 1.77% gc.ps_scavenge.count 4ps_eden_space 14M 65M 672M 2.21% gc.ps_scavenge.time(m 166ps_survivor_space 4M 5M 5M s)ps_old_gen 12M 85M 1365M 0.91% gc.ps_marksweep.count 0nonheap 20M 23M -1 gc.ps_marksweep.time( 0code_cache 3M 5M 240M 1.32% ms)Runtimeos.name Mac OS Xos.version 10.13.4java.version 1.8.0_162java.home /Library/Java/JavaVir tualMachines/jdk1.8.0 _162.jdk/Contents/Hom e/jre 4. 通过thread命令来获取到arthas-demo进程的Main Classthread 1会打印线程ID 1的栈，通常是main函数的线程。 12$ thread 1 | grep &apos;main(&apos; at demo.MathGame.main(MathGame.java:17) 5. 通过jad来反编译Main Class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778$ jad demo.MathGame ClassLoader:+-sun.misc.Launcher$AppClassLoader@3d4eac69 +-sun.misc.Launcher$ExtClassLoader@66350f69 Location:/tmp/arthas-demo.jar /* * Decompiled with CFR 0_132. */package demo; import java.io.PrintStream;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Random;import java.util.concurrent.TimeUnit; public class MathGame &#123; private static Random random = new Random(); private int illegalArgumentCount = 0; public static void main(String[] args) throws InterruptedException &#123; MathGame game = new MathGame(); do &#123; game.run(); TimeUnit.SECONDS.sleep(1L); &#125; while (true); &#125; public void run() throws InterruptedException &#123; try &#123; int number = random.nextInt(); List&lt;Integer&gt; primeFactors = this.primeFactors(number); MathGame.print(number, primeFactors); &#125; catch (Exception e) &#123; System.out.println(String.format(&quot;illegalArgumentCount:%3d, &quot;, this.illegalArgumentCount) + e.getMessage()); &#125; &#125; public static void print(int number, List&lt;Integer&gt; primeFactors) &#123; StringBuffer sb = new StringBuffer(&quot;&quot; + number + &quot;=&quot;); Iterator&lt;Integer&gt; iterator = primeFactors.iterator(); while (iterator.hasNext()) &#123; int factor = iterator.next(); sb.append(factor).append(&apos;*&apos;); &#125; if (sb.charAt(sb.length() - 1) == &apos;*&apos;) &#123; sb.deleteCharAt(sb.length() - 1); &#125; System.out.println(sb); &#125; public List&lt;Integer&gt; primeFactors(int number) &#123; if (number &lt; 2) &#123; ++this.illegalArgumentCount; throw new IllegalArgumentException(&quot;number is: &quot; + number + &quot;, need &gt;= 2&quot;); &#125; ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;(); int i = 2; while (i &lt;= number) &#123; if (number % i == 0) &#123; result.add(i); number /= i; i = 2; continue; &#125; ++i; &#125; return result; &#125;&#125; Affect(row-cnt:1) cost in 970 ms. 6. watch通过watch命令来查看demo.MathGame#primeFactors函数的返回值： 123456789101112131415161718192021222324252627282930$ watch demo.MathGame primeFactors returnObjPress Ctrl+C to abort.Affect(class-cnt:1 , method-cnt:1) cost in 107 ms.ts=2018-11-28 19:22:30; [cost=1.715367ms] result=nullts=2018-11-28 19:22:31; [cost=0.185203ms] result=nullts=2018-11-28 19:22:32; [cost=19.012416ms] result=@ArrayList[ @Integer[5], @Integer[47], @Integer[2675531],]ts=2018-11-28 19:22:33; [cost=0.311395ms] result=@ArrayList[ @Integer[2], @Integer[5], @Integer[317], @Integer[503], @Integer[887],]ts=2018-11-28 19:22:34; [cost=10.136007ms] result=@ArrayList[ @Integer[2], @Integer[2], @Integer[3], @Integer[3], @Integer[31], @Integer[717593],]ts=2018-11-28 19:22:35; [cost=29.969732ms] result=@ArrayList[ @Integer[5], @Integer[29], @Integer[7651739],] 更多的功能可以查看进阶使用。 7. 退出arthas如果只是退出当前的连接，可以用quit或者exit命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。 如果想完全退出arthas，可以执行shutdown命令。 进阶使用基础命令 help——查看命令帮助信息 cat——打印文件内容，和linux里的cat命令类似 pwd——返回当前的工作目录，和linux命令类似 cls——清空当前屏幕区域 session——查看当前会话的信息 reset——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类 version——输出当前目标 Java 进程所加载的 Arthas 版本号 history——打印命令历史 quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响 shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出 keymap——Arthas快捷键列表及自定义快捷键 jvm相关 dashboard——当前系统的实时数据面板 thread——查看当前 JVM 的线程堆栈信息 jvm——查看当前 JVM 的信息 sysprop——查看和修改JVM的系统属性 sysenv——查看JVM的环境变量 getstatic——查看类的静态属性 New! ognl——执行ognl表达式 New! mbean——查看 Mbean 的信息 class/classloader相关 sc——查看JVM已加载的类信息 sm——查看已加载类的方法信息 jad——反编译指定已加载类的源码 mc——内存编绎器，内存编绎.java文件为.class文件 redefine——加载外部的.class文件，redefine到JVM里 dump——dump 已加载类的 byte code 到特定目录 classloader——查看classloader的继承树，urls，类加载信息，使用classloader去getResource monitor/watch/trace相关 请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 shutdown 或将增强过的类执行 reset 命令。 monitor——方法执行监控 watch——方法执行数据观测 trace——方法内部调用路径，并输出方法路径上的每个节点上耗时 stack——输出当前方法被调用的调用路径 tt——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测 options options——查看或设置Arthas全局开关 管道Arthas支持使用管道对上述命令的结果进行进一步的处理，如sm java.lang.String * | grep &#39;index&#39; grep——搜索满足条件的结果 plaintext——将命令的结果去除ANSI颜色 wc——按行统计输出结果 后台异步任务当线上出现偶发的问题，比如需要watch某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考这里 使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session断开不影响任务执行（生命周期默认为1天） jobs——列出所有job kill——强制终止任务 fg——将暂停的任务拉到前台执行 bg——将暂停的任务放到后台执行 Web Console通过websocket连接Arthas。 Web Console 其他特性 异步命令支持 执行结果存日志 批处理的支持 ognl表达式的用法说明 命令列表 dashboard thread jvm sysprop sysenv mbean getstatic ognl sc sm dump jad classloader mc redefine monitor watch trace stack tt cat pwd options Arthas 基础命令 help——查看命令帮助信息 cls——清空当前屏幕区域 session——查看当前会话的信息 reset——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类 version——输出当前目标 Java 进程所加载的 Arthas 版本号 history——打印命令历史 quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响 shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出 keymap——Arthas快捷键列表及自定义快捷键]]></content>
      <categories>
        <category>Java诊断工具</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis]]></title>
    <url>%2F2019%2F07%2F26%2Fredis%2F</url>
    <content type="text"><![CDATA[命令资料收集 Redis：http://doc.redisfans.com/ 其他信息：https://www.runoob.com/redis/redis-tutorial.html]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua]]></title>
    <url>%2F2019%2F07%2F26%2Flua%2F</url>
    <content type="text"><![CDATA[设计目的其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 Lua 特性 轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。 可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。 其它特性: 支持面向过程(procedure-oriented)编程和函数式编程(functional programming)； 自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象； 语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持； 通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。 Hello World!1print(&quot;Hello World!&quot;) Lua 基本语法交互式编程 123&gt; print(&quot;Hello World！&quot;)&gt; Hello World！&gt; 脚本式编程​ 将下列代码存储在名为 hello.lua 的脚本文件中： 12print(&quot;Hello World！&quot;)print(&quot;www.runoob.com&quot;) 使用 lua 名执行以上脚本，输出结果为： 123$ lua hello.luaHello World！www.runoob.com 我们也可以将代码修改为如下形式来执行脚本（在开头添加：#!/usr/local/bin/lua）： 实例#!/usr/local/bin/lua print(“Hello World！”)print(“www.runoob.com&quot;) 以上代码中，我们指定了 Lua 的解释器 /usr/local/bin directory。加上 # 号标记解释器会忽略它。接下来我们为脚本添加可执行权限，并执行： 123./hello.lua Hello World！www.runoob.com 注释单行注释两个减号是单行注释: 1-- 多行注释1234--[[ 多行注释 多行注释 --]] 其他lua相关知识均可参考下面两个链接: https://www.jb51.net/article/136109.htm https://www.runoob.com/lua/lua-environment.html]]></content>
      <categories>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令收集]]></title>
    <url>%2F2019%2F07%2F24%2FLinux%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[批量杀死进程命令1ps -ef|grep boco|grep -v grep|awk &apos;&#123;print &quot;kill -9 &quot;$2&#125;&apos; ps -ef|grep aaa|grep -v grep 这是大家很熟悉的命令，这里就不再多说，就是从当前系统运行的进程的进程名中包含aaa关键字的进程。 后面部分就是awk命令了，一般awk命令的格式为：awk ‘ pattern {action} ‘ ​ print是打印，kill -9 是强制停止进程的命令， $2就是前面有ps -ef命令得出的结果的第二列上显示的内容。 下面举一个简单的例子： #ps -ef|grep boco|grep -v grep root 9884 9883 0 17:10:01 ? 0:00 sendmail -oem -oi -froot boco root 9883 9880 0 17:10:01 ? 0:00 /usr/bin/mail boco boco 11112 1 0 Dec 24 ? 0:00 ./boco_appmaster -d /home/boco/agent boco 11126 11125 61 Dec 24 ? 52:59 ./boco_hostagent -i socket -l boco 11125 11112 37 Dec 24 ? 43:25 ./boco_appmaster -d /home/boco/agent#ps -ef|grep boco|grep -v grep|awk ‘{print “kill -9 “$2}’kill -9 9884kill -9 9883kill -9 11112kill -9 11126kill -9 11125 可以看出，ps -ef|grep boco|grep -v grep列出了当前主机中运行的进程中包含boco关键字的进程 而ps -ef|grep boco|grep -v grep|awk ‘{print “kill -9 “$2}’则列出了要kill掉这些进程的命令，并将之打印在了屏幕上 在ps -ef|grep boco|grep -v grep|awk ‘{print “kill -9 “$2}’后面加上|sh后，则执行这些命令，进而杀掉了这些进程。 示例：ps -aux|grep “service_2.php”|awk ‘{print “kill -9 “$2}’|sh]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora快捷键收集]]></title>
    <url>%2F2019%2F07%2F24%2Ftypora%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[对文字的特殊标注标题 123456# 一阶标题 或者快捷键Ctrl+1## 二阶标题 或者快捷键Ctrl+2### 三阶标题 或者快捷键Ctrl+3#### 四阶标题 或者快捷键Ctrl+4##### 五阶标题 或者快捷键Ctrl+5###### 六阶标题 或者快捷键Ctrl+6 下划线 1&lt;u&gt;下划线的内容&lt;/u&gt; 或按快捷键Ctrl+U 字体加粗 1**加粗内容** 或按快捷键Ctrl+B 斜体 1*倾斜内容* 或按快捷键Ctrl+I 删除线 1~~删除线的内容~~ 或按快捷键Alt+Shift+5 文字高亮 1==我是最重要的== 角标 1x^2^ H~2~O list有序 1数字+英文小数点(.)+空格 无序 1+ 、- 、* 创建无序列，任意数字开始+空格创建有序列表 Todolist 12- [ ] 参加会议- [x] 中超足球赛 Table 1快捷键Ctrl+T弹出对话框 分割线 12***+回车 ---+回车 插入图片 123![图片内容](http://t10.baidu.com/it/u=1069603383,3074552113&amp;fm=170&amp;s=771B15C75C12D8D61C3C69FB0300501F&amp;w=640&amp;h=426&amp;img.JPEG) 也可使用快捷键Ctrl+KPS：也可将图片直接拖拽进来，自动生成链接 链接内行式 1[百度一下，你就知道](https://www.baidu.com/) 参考式 12[百度一下，你就知道][]https://www.baidu.com/ # 第二个括号内可任意填写(不显)​ [百度一下，你就知道][]https://www.baidu.com/ 快速链接​123&lt;http://www.baidu.com&gt;PS：按住Ctrl点击链接可直接打开。​ #数学公式（简）​12Typora支持加入用LaTeX写成的数学公式，并且在软件界面下用MathJax直接渲染。​ *1.行内公式(inline math)，可以在偏好设置中单独打开，由一个美元符号将公式围起来；name=\prod \frac{1}{i^2}$*2.行外公式，直接按Ctrl+Shift+M；(双$+回车也可做到)​12注：上标和下标可以使用数学表达式来获取​ #其余 引用​12&gt;+空格 或按快捷键Ctrl+Shift+Q​ 注释要添加注释的文字​123这是我们的标号[^1][^1]:标号的含义​ 表情 ​12:单词:​ 目录​12[TOC]​ Typora快捷键整合​1234567891011121314Ctrl+1 一阶标题 Ctrl+B 字体加粗Ctrl+2 二阶标题 Ctrl+I 字体倾斜Ctrl+3 三阶标题 Ctrl+U 下划线Ctrl+4 四阶标题 Ctrl+Home 返回Typora顶部Ctrl+5 五阶标题 Ctrl+End 返回Typora底部Ctrl+6 六阶标题 Ctrl+T 创建表格Ctrl+L 选中某句话 Ctrl+K 创建超链接Ctrl+D 选中某个单词 Ctrl+F 搜索Ctrl+E 选中相同格式的文字 Ctrl+H 搜索并替换Alt+Shift+5 删除线 Ctrl+Shift+I 插入图片Ctrl+Shift+M 公式块 Ctrl+Shift+Q 引用注：一些实体符号需要在实体符号之前加”\”才能够显示​]]></content>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
</search>
